rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users Collection
    match /users/{userId} {
      // Anyone authenticated can read profiles
      allow read: if request.auth != null;
      
      // User can update their own profile fully
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Special rule to allow updating just the matchesData field from other users
      allow update: if request.auth != null && 
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['matchesData', 'matches']);
      
      // Allow updating subscription-related fields
      allow update: if request.auth != null && 
                     request.auth.uid == userId && 
                     request.resource.data.diff(resource.data).affectedKeys()
                       .hasAny(['subscription', 'subscriptionData', 'weeklyStats', 'lastResetDate', 'favorites']);
      
      // Allow creation only by the user themselves
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Never allow deletion of user profiles
      allow delete: if false;
    }
    
    // New Match Subscriptions Collection
    match /subscriptions/{userId} {
      // Allow users to read their own subscription data
      // AND allow any authenticated user to read other users' subscription data for matching
      allow read: if request.auth != null;
      
      // Allow users to create/update their own subscription data
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Allow updating match-related fields for the matching service
      // This enables the bidirectional matching to work
      allow update: if request.auth != null && 
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['matchCount', 'matchCooldownStartedAt', 'availableForMatching']);
      
      // Never allow deletion of subscription data
      allow delete: if false;
    }
    
    // User Subscriptions Collection (legacy)
    match /userSubscriptions/{userId} {
      // Allow users to read their own subscription data
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create/update their own subscription data
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Allow admin service to update match-related fields only (more secure)
      // Requires admin role claim or performing only certain updates (for matching service)
      allow update: if request.auth != null && 
                    (request.auth.token.admin == true || 
                     request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['matchesThisWeek', 'matches']));
      
      // Never allow deletion of subscription data
      allow delete: if false;
    }
    
    // AnimeUsers Collection (reverse index)
    match /animeUsers/{animeId} {
      // Anyone authenticated can read
      allow read: if request.auth != null;
      
      // Simplified rules for writes - allow any authenticated user to update the users array
      // This is necessary for adding/removing users from anime favorites
      allow create, update: if request.auth != null;
      
      // Allow deletion of documents (when no users are left)
      allow delete: if request.auth != null;
    }
    
    // Chats Collection
    match /chats/{chatId} {
      // Allow chat creation if user is one of the participants
      allow create: if request.auth != null && 
                     request.auth.uid in request.resource.data.participants;
      
      // Allow reading/updating if user is a participant
      allow read, update: if request.auth != null && 
                           request.auth.uid in resource.data.participants;
      
      // Never allow direct deletion of chats
      allow delete: if false;
      
      // Messages Subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                    request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Only allow creating messages if user is a participant and the senderId matches their ID
        allow create: if request.auth != null && 
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                      request.auth.uid == request.resource.data.senderId;
        
        // Don't allow updating or deleting existing messages
        allow update, delete: if false;
      }
    }
  }
}